// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Student {
  username      String
  email         String  @unique
  parentEmail   String
  password      String
  usn           String  @unique @id
  date          Int
  month         Int
  year          Int
  departmentId  Int 
  division      String?
  yearOfJoining Int
  Attendance    Attendance?
  Department    Department @relation(fields: [departmentId], references: [id])
  Fee           Fees?
}

model Teacher {
  id              Int @id @default(autoincrement())
  username        String 
  email           String @unique
  password        String
  allocations     Allocations[]
}

model Allocations{
  teacherId       Int
  departmentId    Int
  division        String
  subjectId       Int
  noOfClassTaken  Int
  teacher         Teacher @relation(fields: [teacherId], references: [id])
  Department      Department @relation(fields: [departmentId], references: [id])
  @@id([teacherId, departmentId ,division,subjectId])
}

model Attendance {
  usn             String   @unique
  subjectId       Int
  attendance      Int
  marks           Int
  student   Student @relation(fields: [usn], references: [usn])
  subject   Subject @relation(fields: [subjectId],references: [id])
  @@id([usn, subjectId])
}

model Department{
  id          Int @default(autoincrement()) @id
  name        String
  student     Student[] 
  allocation  Allocations[]
}

model Subject{
  id          Int @default(autoincrement()) @id
  name        String
  sem         Int
  attendence  Attendance[]
}

model Otp{
  id        Int @default(autoincrement()) @id
  email     String @unique
  OTP       Int
  password  String
} 


model User {
  id        Int       @id @default(autoincrement())
  username  String    @unique
  messages  Message[] @relation("SentMessages")
  receivedMessages Message[] @relation("ReceivedMessages")
}

model Message {
  id          Int      @id @default(autoincrement())
  content     String
  senderId    Int
  receiverId  Int
  timestamp   DateTime @default(now())
  sender      User     @relation("SentMessages", fields: [senderId], references: [id])
  receiver    User     @relation("ReceivedMessages", fields: [receiverId], references: [id])
}

model Fees{
  id          Int      @id @default(autoincrement())
  usn         String         @unique
  feePaid     Int
  totalPaid   Int
  student     Student @relation(fields: [usn],references: [usn])
}